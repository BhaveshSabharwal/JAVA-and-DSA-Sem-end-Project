@startuml
skinparam classAttributeIconSize 0
skinparam packageStyle rectangle

package com.example {
    class Main {
        + {static} int START_TIME
        + {static} int END_TIME
        + {static} int RECESS_START
        + {static} int RECESS_END
        + {static} Random random
        + {static} Scanner scanner
        + {static} void main(String[])
        + {static} void generateTimetableInteractive(...)
        + {static} void generateTimetableFromFile(...)
        + {static} void printExistingTimetable(...)
        + {static} void generateOrEditInputFile()
        + {static} void deleteTimetableFile(...)
        + {static} List<String> getSubjects()
        + {static} Map<String,Integer> getDurations(...)
        + {static} Map<String,Integer> getSessionsPerWeek(...)
        + {static} Map<String,List<String>> getTeachers(...)
        + {static} List<String> getWeekDays()
        + {static} List<Integer> generateDailySlots()
        + {static} List<String> generateSlotLabels(...)
        + {static} Map<String,Map<...>>> assignSubjectsWithTeachers(...)
        + {static} void printTimetables(...)
        + {static} void printTimeSlot(...)
        + {static} void saveToJson(...)
        - {static} void validateSessionsPerWeek(...)
        - {static} void validateTeachers(...)
    }

    class Main$SubjectSession {
        ~ String subject
        ~ int duration
        ~ String teacher
        ~ <<Create>> SubjectSession(String,int,String)
    }

    class TimetableGenerator {
        + <<Create>> TimetableGenerator()
        + List<Integer> generateDailySlots()
        + List<String> generateSlotLabels(...)
        + Map<String,Map<...>>> generateTimetable(...)
    }

    class TimetablePrinter {
        + void printTimetables(...)
    }

    class TimetableFileHandler {
        + void saveToJson(...)
        + Map<String,Object> loadInputFile(String)
        + Map<String,Map<...>>> loadTimetable(String)
    }

    class deleteTimetable {
        + boolean deleteFile(String)
    }

    class SubjectSession {
        - String subject
        - int duration
        - String teacher
        + <<Create>> SubjectSession(String,int,String)
        + String getSubject()
        + int getDuration()
        + String getTeacher()
    }

    class UserInputHandler {
        + <<Create>> UserInputHandler()
        + List<String> getSubjects()
        + Map<String,Integer> getDurations(...)
        + Map<String,Integer> getSessionsPerWeek(...)
        + Map<String,List<String>> getTeachers(...)
        + List<String> getWeekDays()
        + void generateOrEditInputFile()
        + int getMenuChoice()
        + String getFilename(String)
        + int getNumberOfSections()
    }

    class MainTest {
        ~ void testGenerateDailySlots()
        ~ void testGenerateSlotLabels()
        ~ void testAssignSubjectsWithTeachers()
    }

    class TimetableGeneratorTest {
        ~ void testTimetableGeneration()
    }

    class TimetableFileHandlerTest {
        ~ Path tempDir
        + void testSaveAndLoadTimetable()
    }

    class UserInputHandlerTest {
        ~ void testGetSubjects()
        ~ void testGetDurations()
    }
}

package com.example.datastructures {
    class ArrayList {
        - Object[] elements
        - int size
        + <<Create>> ArrayList()
        + void add(T)
        + T get(int)
        + T remove(int)
        + int size()
        + String toString()
    }

    class HashMap {
        - Entry<K,V>[] buckets
        - int size
        + <<Create>> HashMap()
        + void put(K,V)
        + V get(K)
        + boolean containsKey(K)
        + V remove(K)
        + int size()
        + String toString()
    }

    class HashMap$Entry {
        ~ K key
        ~ V value
        ~ Entry<K,V> next
        ~ <<Create>> Entry(K,V)
    }

    class HashSet {
        + <<Create>> HashSet()
        + boolean add(T)
        + boolean contains(T)
        + boolean remove(T)
        + int size()
        + String toString()
    }

    class Queue {
        + <<Create>> Queue()
        + void enqueue(T)
        + T dequeue()
        + T peek()
        + boolean isEmpty()
        + int size()
    }

    class Queue$Node {
        ~ T data
        ~ Node<T> next
        ~ <<Create>> Node(T)
    }
}

' Relationships (only the meaningful ones kept)
Main +.. Main$SubjectSession
HashMap +.. HashMap$Entry
Queue +.. Queue$Node

@enduml
